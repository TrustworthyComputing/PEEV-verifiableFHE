steps:
- task: JavaToolInstaller@0
  displayName: Use Java 11
  inputs:
    versionSpec: '11'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'

- task: PowerShell@2
  displayName: Install CMake 3.18.6
  inputs:
    targetType: 'inline'
    script: |
      # Download specific version of CMake
      $ToolsDirectory = Join-Path -Path $Env:BUILD_SOURCESDIRECTORY -ChildPath tools
      $CMakeZipFile = Join-Path $ToolsDirectory -ChildPath cmake.zip

      Invoke-WebRequest -Uri "https://cmake.org/files/v3.18/cmake-3.18.6-win64-x64.zip" -OutFile $CMakeZipFile
      New-Item -Path $ToolsDirectory -Name "cmake" -ItemType "directory"
      Expand-Archive -Path $CMakeZipFile -DestinationPath $ToolsDirectory/cmake
      Copy-Item -Path $ToolsDirectory/cmake/cmake-3.18.6-win64-x64/* -Destination "c:/Program Files/CMake" -Recurse -Force

- task: CMake@1
  displayName: Verify CMake version
  inputs:
    workingDirectory: '$(Build.SourcesDirectory)'
    cmakeArgs: '--version'

- task: PowerShell@2
  displayName: Download Ninja
  inputs:
    targetType: 'inline'
    script: |
      # Download Ninja
      $ToolsDirectory = Join-Path -Path $Env:BUILD_SOURCESDIRECTORY -ChildPath tools
      $NinjaZipFile = Join-Path $ToolsDirectory -ChildPath ninja.zip
      $NinjaExeFile = Join-Path $ToolsDirectory -ChildPath ninja.exe

      Invoke-WebRequest -Uri "https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip" -OutFile $NinjaZipFile
      Expand-Archive -Path $NinjaZipFile -DestinationPath $ToolsDirectory
      Copy-Item -Path $NinjaExeFile -Destination "c:/Program Files/CMake/bin"

- task: Gradle@2
  displayName: Compile Android Native Libraries
  inputs:
    workingDirectory: '$(Build.SourcesDirectory)/android'
    gradleWrapperFile: '$(Build.SourcesDirectory)/android/gradlew'
    gradleOptions: ''
    options: '--stacktrace --no-parallel'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'compileReleaseSources'

- task: PowerShell@2
  displayName: Copy binary files to staging directory
  inputs:
    targetType: 'inline'
    script: |
      # Directories
      $AndroidFilesDirectory = Join-Path -Path $Env:BUILD_SOURCESDIRECTORY -ChildPath android/app/.cxx
      $TargetDirectoryArm64 = Join-Path -Path $Env:BUILD_ARTIFACTSTAGINGDIRECTORY -ChildPath lib/arm64-v8a
      $TargetDirectoryX64 = Join-Path -Path $Env:BUILD_ARTIFACTSTAGINGDIRECTORY -ChildPath lib/x86_64

      # Create directory if necessary
      mkdir -ErrorAction Ignore $TargetDirectoryArm64
      mkdir -ErrorAction Ignore $TargetDirectoryX64

      Get-ChildItem -Path $AndroidFilesDirectory -Recurse | Where {$_.Fullname -match 'RelWithDebInfo\\.*\\arm64-v8a\\lib\\arm64-v8a\\libsealc.so'} | Copy-Item -Destination $TargetDirectoryArm64
      Get-ChildItem -Path $AndroidFilesDirectory -Recurse | Where {$_.Fullname -match 'RelWithDebInfo\\.*\\x86_64\\lib\\x86_64\\libsealc.so'} | Copy-Item -Destination $TargetDirectoryX64

- task: PublishBuildArtifacts@1
  displayName: Publish build artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: ${{ parameters.artifactName }}
